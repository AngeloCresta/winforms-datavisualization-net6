using System.Windows.Forms.DataVisualization.Charting;
...
  
private double SelectionStart = double.NaN;
...

this.chart1.KeyDown += new System.Windows.Forms.KeyEventHandler(this.chart1_KeyUp);
this.chart1.Click += new System.EventHandler(this.chart1_Click);
...

protected override bool ProcessDialogKey(Keys keyData)
{
	// Avoid dialog processing of arrow keys
	if(keyData == Keys.Left || keyData == Keys.Right)
	{
		return false;
	}
	return base.ProcessDialogKey(keyData);
}

private void chart1_Click(object sender, System.EventArgs e)
{
	// Set input focus to the chart control
	chart1.Focus();
	
	// Set the selection start variable to that of the current position
	this.SelectionStart = chart1.ChartAreas["Default"].CursorX.Position;
}
		
private void ProcessSelect(System.Windows.Forms.KeyEventArgs e)
{
	// Process keyboard keys
	if(e.KeyCode == Keys.Right)
	{
		// Make sure the selection start value is assigned
		if(this.SelectionStart == double.NaN)
			this.SelectionStart = chart1.ChartAreas["Default"].CursorX.Position;

		// Set the new cursor position 
		chart1.ChartAreas["Default"].CursorX.Position += chart1.ChartAreas["Default"].CursorX.Interval;
	}
	else if(e.KeyCode == Keys.Left)
	{
		// Make sure the selection start value is assigned
		if(this.SelectionStart == double.NaN)
			this.SelectionStart = chart1.ChartAreas["Default"].CursorX.Position;

		// Set the new cursor position 
		chart1.ChartAreas["Default"].CursorX.Position -= chart1.ChartAreas["Default"].CursorX.Interval;
	}

	// If the cursor is outside the view, set the view
	// so that the cursor can be seen
	SetView();


	chart1.ChartAreas["Default"].CursorX.SelectionStart = this.SelectionStart;
	chart1.ChartAreas["Default"].CursorX.SelectionEnd = chart1.ChartAreas["Default"].CursorX.Position;
}
		
private void SetView()
{
	// Keep the cursor from leaving the max and min axis points
	if(chart1.ChartAreas["Default"].CursorX.Position < 0)
		chart1.ChartAreas["Default"].CursorX.Position = 0;
			
	else if(chart1.ChartAreas["Default"].CursorX.Position > 75)
		chart1.ChartAreas["Default"].CursorX.Position = 75;


	// Move the view to keep the cursor visible
	if(chart1.ChartAreas["Default"].CursorX.Position < chart1.ChartAreas["Default"].AxisX.ScaleView.Position)
		chart1.ChartAreas["Default"].AxisX.ScaleView.Position = chart1.ChartAreas["Default"].CursorX.Position;
		
	else if ((chart1.ChartAreas["Default"].CursorX.Position > 
		(chart1.ChartAreas["Default"].AxisX.ScaleView.Position+chart1.ChartAreas["Default"].AxisX.ScaleView.Size)))
	{
		chart1.ChartAreas["Default"].AxisX.ScaleView.Position = 
			(chart1.ChartAreas["Default"].CursorX.Position-chart1.ChartAreas["Default"].AxisX.ScaleView.Size);
	}
}

private void ProcessScroll(System.Windows.Forms.KeyEventArgs e)
{
	// Process keyboard keys
	if(e.KeyCode == Keys.Right)
		// set the new cursor position 
		chart1.ChartAreas["Default"].CursorX.Position += chart1.ChartAreas["Default"].CursorX.Interval;

	else if(e.KeyCode == Keys.Left)
		// Set the new cursor position 
		chart1.ChartAreas["Default"].CursorX.Position -= chart1.ChartAreas["Default"].CursorX.Interval;

	// If the cursor is outside the view, set the view
	// so that the cursor can be seen
	SetView();


	// Set the selection start variable in case shift arrows are selected
	this.SelectionStart = chart1.ChartAreas["Default"].CursorX.Position;

	// Reset the old selection start and end
	chart1.ChartAreas["Default"].CursorX.SelectionStart = double.NaN;
	chart1.ChartAreas["Default"].CursorX.SelectionEnd = double.NaN;
}

private void chart1_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
{

	if((e.KeyCode == Keys.Right) || (e.KeyCode == Keys.Left)) 
	{
		// If the key event is shifted, process as a selection
		if(e.Shift)
			ProcessSelect(e);
		else // Process as a scroll
			ProcessScroll(e);
	}

	// On enter, zoom the selection
	else if (e.KeyCode == Keys.Enter)
	{
		double start, end;
		
		if(chart1.ChartAreas["Default"].CursorX.SelectionStart > chart1.ChartAreas["Default"].CursorX.SelectionEnd)
		{
			start = chart1.ChartAreas["Default"].CursorX.SelectionEnd;
			end = chart1.ChartAreas["Default"].CursorX.SelectionStart;
		}
		else
		{
			end = chart1.ChartAreas["Default"].CursorX.SelectionEnd;
			start = chart1.ChartAreas["Default"].CursorX.SelectionStart;
		}

		// Return if no selection actually made
		if(start == end)
			return;

		// Zoom the selection
		chart1.ChartAreas["Default"].AxisX.ScaleView.Zoom( start,(end-start), DateTimeIntervalType.Number,true);

		// Reset selection values
		this.SelectionStart = chart1.ChartAreas["Default"].CursorX.Position;
		chart1.ChartAreas["Default"].CursorX.SelectionStart = double.NaN;
		chart1.ChartAreas["Default"].CursorX.SelectionEnd = double.NaN;

	}

	else if (e.KeyCode == Keys.Back)
	{
		// Reset zoom back to previous view state
		chart1.ChartAreas["Default"].AxisX.ScaleView.ZoomReset(1);
		
		// Reset selection values
		this.SelectionStart = chart1.ChartAreas["Default"].CursorX.Position;
		chart1.ChartAreas["Default"].CursorX.SelectionStart = double.NaN;
		chart1.ChartAreas["Default"].CursorX.SelectionEnd = double.NaN;
	}

}

...

